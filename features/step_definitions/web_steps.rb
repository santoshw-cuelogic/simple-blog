# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a
# newer version of cucumber-rails. Consider adding your own code to a new file
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.


require 'uri'
require 'cgi'
require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))
include BestInPlace::TestHelpers

# Commonly used webrat steps
# http://github.com/brynary/webrat

Given /^(?:|I )am on (.+)$/ do |page_name|
  visit path_to(page_name)
end

When(/^I fill in "(.*?)" with "(.*?)" within "(.*?)"$/) do |field, value, container|
  within(container) do
    fill_in(field, :with => value)
  end
end

Given(/^I select "(.*?)" from "(.*?)" within "(.*?)"$/) do |value,field,container|
  within(container) do
   select(value, :from => field)
  end
end

When /^(?:|I )go to (.+)$/ do |page_name|
  visit path_to(page_name)
end

When /^(?:|I )press "([^"]*)"$/ do |button|
  click_button(button)
end

When(/^I press "(.*?)" within "(.*?)"$/) do |button, container|
  within(container) do
    click_button(button)
  end
end

When /^(?:|I )follow "([^"]*)"$/ do |link|
  click_link(link)
end

When(/^clicked on "(.*?)" link$/) do |link|
  click_link(link)
end

When(/^clicked on "(.*?)" link within "(.*?)"$/) do |link, container|
  within(container) do
    click_link(link)
  end
end

When /^(?:|I )click "([^"]*)" span$/ do |selector|
  element ||= find('span', :text => selector)
  element.click
end

And /^(?:|I )fill in "([^"]*)" span with "([^"]*)"$/ do |text, value|
  bip_text(Country, :name, value)
end

When(/^I wait for "(.*?)" seconds$/) do |sec|
  sleep(sec.to_i)
end


When(/^user logs on through the logon page credential with "(.*?)" and "(.*?)"$/) do |email, pwd|
  visit(new_user_session_path)
  fill_in( "user_email", :with => email )
  fill_in( "user_password", :with => pwd )
  click_button( "Sign in" )
end

Given /^I am logged in as "(.*)"$/ do |email|
  @user = Factory(:user, :email => email)
  visit(new_user_session_path)
  fill_in("user_email", :with => @user.email)
  fill_in("user_password", :with => @user.password)
  click_button("Sign in")
end

When /^(?:|I )follow "([^"]*)" within "([^"]*)"$/ do |link, parent|
  click_link_within(parent, link)
end

When /^(?:|I )fill in "([^"]*)" with "([^"]*)"$/ do |field, value|
  fill_in(field, :with => value)
end

When /^(?:|I )fill in "([^"]*)" for "([^"]*)"$/ do |value, field|
  fill_in(field, :with => value)
end

# Use this to fill in an entire form with data from a table. Example:
#
# When I fill in the following:
# | Account Number | 5002 |
# | Expiry date | 2009-11-01 |
# | Note | Nice guy |
# | Wants Email? | |
#
# TODO: Add support for checkbox, select og option
# based on naming conventions.
#
When /^(?:|I )fill in the following:$/ do |fields|
  fields.rows_hash.each do |name, value|
    When %{I fill in "#{name}" with "#{value}"}
  end
end

When /^(?:|I )select "([^"]*)" from "([^"]*)"$/ do |value, field|
  select(value, :from => field)
end

# Use this step in conjunction with Rail's datetime_select helper. For example:
# When I select "December 25, 2008 10:00" as the date and time
When /^(?:|I )select "([^"]*)" as the date and time$/ do |time|
  select_datetime(time)
end

# Use this step when using multiple datetime_select helpers on a page or
# you want to specify which datetime to select. Given the following view:
# <%= f.label :preferred %><br />
# <%= f.datetime_select :preferred %>
# <%= f.label :alternative %><br />
# <%= f.datetime_select :alternative %>
# The following steps would fill out the form:
# When I select "November 23, 2004 11:20" as the "Preferred" date and time
# And I select "November 25, 2004 10:30" as the "Alternative" date and time
When /^(?:|I )select "([^"]*)" as the "([^"]*)" date and time$/ do |datetime, datetime_label|
  select_datetime(datetime, :from => datetime_label)
end

# Use this step in conjunction with Rail's time_select helper. For example:
# When I select "2:20PM" as the time
# Note: Rail's default time helper provides 24-hour time-- not 12 hour time. Webrat
# will convert the 2:20PM to 14:20 and then select it.
When /^(?:|I )select "([^"]*)" as the time$/ do |time|
  select_time(time)
end

# Use this step when using multiple time_select helpers on a page or you want to
# specify the name of the time on the form. For example:
# When I select "7:30AM" as the "Gym" time
When /^(?:|I )select "([^"]*)" as the "([^"]*)" time$/ do |time, time_label|
  select_time(time, :from => time_label)
end

# Use this step in conjunction with Rail's date_select helper. For example:
# When I select "February 20, 1981" as the date
When /^(?:|I )select "([^"]*)" as the date$/ do |date|
  select_date(date)
end

# Use this step when using multiple date_select helpers on one page or
# you want to specify the name of the date on the form. For example:
# When I select "April 26, 1982" as the "Date of Birth" date
When /^(?:|I )select "([^"]*)" as the "([^"]*)" date$/ do |date, date_label|
  select_date(date, :from => date_label)
end

When /^(?:|I )check "([^"]*)"$/ do |field|
  check(field)
end

When /^(?:|I )uncheck "([^"]*)"$/ do |field|
  uncheck(field)
end

When /^(?:|I )choose "([^"]*)"$/ do |field|
  choose(field)
end

# Adds support for validates_attachment_content_type. Without the mime-type getting
# passed to attach_file() you will get a "Photo file is not one of the allowed file types."
# error message
When /^(?:|I )attach the file "([^"]*)" to "([^"]*)"$/ do |path, field|
  type = path.split(".")[1]

  case type
    when "jpg"
      type = "image/jpg"
    when "jpeg"
      type = "image/jpeg"
    when "png"
      type = "image/png"
    when "gif"
      type = "image/gif"
  end

  attach_file(field, path, type)
end

When /^I confirm popup$/ do
  page.driver.browser.switch_to.alert.accept
end

When /^I dismiss popup$/ do
  page.driver.browser.switch_to.alert.dismiss
end

# Then /^(?:|I )should see "([^"]*)"$/ do |text|
# if response.respond_to? :should
# response.should contain(text)
# else
# assert_contain text
# end
# end

Then(/^I should check the checkbox "(.*?)" should be checked within "(.*?)"$/) do |checkbox, container|
  within(container) do
    first("input[type='checkbox']").click
  end
end

Then /^I should check the checkbox "([^"]*)" should be checked$/ do |checkbox|
  first("input[type='checkbox']").click
end

When /^I hover and click on "([^\"]*)"$/ do |selector|
  page.driver.browser.execute_script %Q{
    $("#dropv_1.dropv").removeClass("dropv");
  }
end

Then /^I should see "([^"]*)"$/ do |message|
  page.should have_content(message)
end

Then /^(?:|I )should see "([^"]*)" within "([^"]*)"$/ do |text, selector|
  within(selector) do |content|
    if content.respond_to? :should
      content.should contain(text)
    else
      hc = Webrat::Matchers::HasContent.new(text)
      assert hc.matches?(content), hc.failure_message
    end
  end
end

Then /^(?:|I )should see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if response.respond_to? :should
    response.should contain(regexp)
  else
    assert_match(regexp, response_body)
  end
end

Then /^(?:|I )should see \/([^\/]*)\/ within "([^"]*)"$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if content.respond_to? :should
      content.should contain(regexp)
    else
      assert_match(regexp, content)
    end
  end
end

Then /^(?:|I )should not see "([^"]*)"$/ do |text|
  if response.respond_to? :should_not
    response.should_not contain(text)
  else
    assert_not_contain(text)
  end
end

Then /^(?:|I )should not see "([^"]*)" within "([^"]*)"$/ do |text, selector|
  within(selector) do |content|
    if content.respond_to? :should_not
      content.should_not contain(text)
    else
      hc = Webrat::Matchers::HasContent.new(text)
      assert !hc.matches?(content), hc.negative_failure_message
    end
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/$/ do |regexp|
  regexp = Regexp.new(regexp)
  if response.respond_to? :should_not
    response.should_not contain(regexp)
  else
    assert_not_contain(regexp)
  end
end

Then /^(?:|I )should not see \/([^\/]*)\/ within "([^"]*)"$/ do |regexp, selector|
  within(selector) do |content|
    regexp = Regexp.new(regexp)
    if content.respond_to? :should_not
      content.should_not contain(regexp)
    else
      assert_no_match(regexp, content)
    end
  end
end

Then /^the "([^"]*)" field should contain "([^"]*)"$/ do |field, value|
  field_value = field_labeled(field).value
  if field_value.respond_to? :should
    field_value.should =~ /#{value}/
  else
    assert_match(/#{value}/, field_value)
  end
end

Then /^the "([^"]*)" field should not contain "([^"]*)"$/ do |field, value|
  field_value = field_labeled(field).value
  if field_value.respond_to? :should_not
    field_value.should_not =~ /#{value}/
  else
    assert_no_match(/#{value}/, field_value)
  end
end

Then /^the "([^"]*)" checkbox should be checked$/ do |label|
  field = field_labeled(label)
  if field.respond_to? :should
    field.should be_checked
  else
    assert field.checked?
  end
end

Then /^the "([^"]*)" checkbox should not be checked$/ do |label|
  field = field_labeled(label)
  if field.respond_to? :should_not
    field.should_not be_checked
  else
    assert !field.checked?
  end
end

Then /^(?:|I )should be on (.+)$/ do |page_name|
  current_path = URI.parse(current_url).path
  if current_path.respond_to? :should
    current_path.should == path_to(page_name)
  else
    assert_equal path_to(page_name), current_path
  end
end

Then /^(?:|I )should have the following query string:$/ do |expected_pairs|
  query = URI.parse(current_url).query
  actual_params = query ? CGI.parse(query) : {}
  expected_params = {}
  expected_pairs.rows_hash.each_pair{|k,v| expected_params[k] = v.split(',')}

  if actual_params.respond_to? :should
    actual_params.should == expected_params
  else
    assert_equal expected_params, actual_params
  end
end

Then /^show me the page$/ do
  save_and_open_page
end

Given(/^I fill in "(.*?)" with more than (\d+) characters$/) do |arg1, arg2|
  o = [('a'..'z'),('A'..'Z')].map{|i| i.to_a}.flatten
  string = ( 0...( arg2.to_i + 1 ) ).map{ o[rand(o.length)] }.join
  fill_in(arg1, :with => string[ 0..( arg2.to_i + 1 ) ])
end

When(/^I press "(.*?)" button$/) do |button|
  click_button(button)
end

Then /^I should not see "([^"]*)" Text$/ do |message|
  page.should_not have_content(message)
end

Given (/^(?:|I )have "(\d+)" system_parameters in db$/) do |count|
  count.to_i.times do
    SystemParameter.create(name: "AP_AGING_DAYS",type: SystemParameter::NUMERIC_LIST,  value: "30,60,90,120",description: "Comma separated list of aging bucket boundaries.")
    SystemParameter.create(name: "AUTO_GENERATE_BATCH_NO",type: SystemParameter::YES_NO,  value: "Y",description: "Auto Generate Batch Number")

  end
end

When /^I click on the "([^"]*)" autocomplete option$/ do |link_text|
  # this should work in future versions but no in current stable
  # page.evaluate_script %Q{ $('.ui-menu-item a:contains("#{link_text}")').trigger("mouseenter").click(); }
  page.execute_script %Q{ $('.ui-menu-item a:contains("#{link_text}")').trigger("mouseenter").click(); }
end

Then(/^I should see the following autocomplete options:$/) do |table|
  # table is a Cucumber::Ast::Table
  sleep(2)
end

Then /^I should not see "([^"]*)" Text$/ do |message|
  page.should_not have_content(message)
end
#When(/^I click "(.*?)" div$/) do |div_ele|
#  find("div##{div_ele}").click
#end

#When /^(?:|I )click span$/ do
#  element ||= find('span')
#  element.click
#end


